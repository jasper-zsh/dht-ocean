// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: ocean/ocean.proto

package ocean

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IfInfoHashExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHash []byte `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
}

func (x *IfInfoHashExistsRequest) Reset() {
	*x = IfInfoHashExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfInfoHashExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfInfoHashExistsRequest) ProtoMessage() {}

func (x *IfInfoHashExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfInfoHashExistsRequest.ProtoReflect.Descriptor instead.
func (*IfInfoHashExistsRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{0}
}

func (x *IfInfoHashExistsRequest) GetInfoHash() []byte {
	if x != nil {
		return x.InfoHash
	}
	return nil
}

type IfInfoHashExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *IfInfoHashExistsResponse) Reset() {
	*x = IfInfoHashExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IfInfoHashExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IfInfoHashExistsResponse) ProtoMessage() {}

func (x *IfInfoHashExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IfInfoHashExistsResponse.ProtoReflect.Descriptor instead.
func (*IfInfoHashExistsResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{1}
}

func (x *IfInfoHashExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type BatchInfoHashExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHashes [][]byte `protobuf:"bytes,1,rep,name=info_hashes,json=infoHashes,proto3" json:"info_hashes,omitempty"`
}

func (x *BatchInfoHashExistRequest) Reset() {
	*x = BatchInfoHashExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfoHashExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfoHashExistRequest) ProtoMessage() {}

func (x *BatchInfoHashExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfoHashExistRequest.ProtoReflect.Descriptor instead.
func (*BatchInfoHashExistRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{2}
}

func (x *BatchInfoHashExistRequest) GetInfoHashes() [][]byte {
	if x != nil {
		return x.InfoHashes
	}
	return nil
}

type BatchInfoHashExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []bool `protobuf:"varint,1,rep,packed,name=results,proto3" json:"results,omitempty"`
}

func (x *BatchInfoHashExistResponse) Reset() {
	*x = BatchInfoHashExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfoHashExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfoHashExistResponse) ProtoMessage() {}

func (x *BatchInfoHashExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfoHashExistResponse.ProtoReflect.Descriptor instead.
func (*BatchInfoHashExistResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{3}
}

func (x *BatchInfoHashExistResponse) GetResults() []bool {
	if x != nil {
		return x.Results
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length   int64    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	Paths    []string `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`
	FileHash []byte   `protobuf:"bytes,3,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{4}
}

func (x *File) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *File) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *File) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

type CommitTorrentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHash  []byte  `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Publisher string  `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Source    string  `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Files     []*File `protobuf:"bytes,5,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *CommitTorrentRequest) Reset() {
	*x = CommitTorrentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTorrentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTorrentRequest) ProtoMessage() {}

func (x *CommitTorrentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTorrentRequest.ProtoReflect.Descriptor instead.
func (*CommitTorrentRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{5}
}

func (x *CommitTorrentRequest) GetInfoHash() []byte {
	if x != nil {
		return x.InfoHash
	}
	return nil
}

func (x *CommitTorrentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommitTorrentRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *CommitTorrentRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CommitTorrentRequest) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type CommitTorrentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitTorrentResponse) Reset() {
	*x = CommitTorrentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTorrentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTorrentResponse) ProtoMessage() {}

func (x *CommitTorrentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTorrentResponse.ProtoReflect.Descriptor instead.
func (*CommitTorrentResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{6}
}

type ListTorrentInfoForTrackerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListTorrentInfoForTrackerRequest) Reset() {
	*x = ListTorrentInfoForTrackerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTorrentInfoForTrackerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTorrentInfoForTrackerRequest) ProtoMessage() {}

func (x *ListTorrentInfoForTrackerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTorrentInfoForTrackerRequest.ProtoReflect.Descriptor instead.
func (*ListTorrentInfoForTrackerRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{7}
}

func (x *ListTorrentInfoForTrackerRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Torrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHash string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
}

func (x *Torrent) Reset() {
	*x = Torrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Torrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Torrent) ProtoMessage() {}

func (x *Torrent) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Torrent.ProtoReflect.Descriptor instead.
func (*Torrent) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{8}
}

func (x *Torrent) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

type ListTorrentInfoForTrackerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TorrentInfos []*Torrent `protobuf:"bytes,1,rep,name=torrent_infos,json=torrentInfos,proto3" json:"torrent_infos,omitempty"`
}

func (x *ListTorrentInfoForTrackerResponse) Reset() {
	*x = ListTorrentInfoForTrackerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTorrentInfoForTrackerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTorrentInfoForTrackerResponse) ProtoMessage() {}

func (x *ListTorrentInfoForTrackerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTorrentInfoForTrackerResponse.ProtoReflect.Descriptor instead.
func (*ListTorrentInfoForTrackerResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{9}
}

func (x *ListTorrentInfoForTrackerResponse) GetTorrentInfos() []*Torrent {
	if x != nil {
		return x.TorrentInfos
	}
	return nil
}

type UpdateTrackerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoHash string `protobuf:"bytes,1,opt,name=info_hash,json=infoHash,proto3" json:"info_hash,omitempty"`
	Seeders  uint32 `protobuf:"varint,2,opt,name=seeders,proto3" json:"seeders,omitempty"`
	Leechers uint32 `protobuf:"varint,3,opt,name=leechers,proto3" json:"leechers,omitempty"`
}

func (x *UpdateTrackerRequest) Reset() {
	*x = UpdateTrackerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrackerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackerRequest) ProtoMessage() {}

func (x *UpdateTrackerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackerRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrackerRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTrackerRequest) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *UpdateTrackerRequest) GetSeeders() uint32 {
	if x != nil {
		return x.Seeders
	}
	return 0
}

func (x *UpdateTrackerRequest) GetLeechers() uint32 {
	if x != nil {
		return x.Leechers
	}
	return 0
}

type UpdateTrackerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTrackerResponse) Reset() {
	*x = UpdateTrackerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrackerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrackerResponse) ProtoMessage() {}

func (x *UpdateTrackerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrackerResponse.ProtoReflect.Descriptor instead.
func (*UpdateTrackerResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{11}
}

type BatchUpdateTrackerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*UpdateTrackerRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchUpdateTrackerRequest) Reset() {
	*x = BatchUpdateTrackerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateTrackerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateTrackerRequest) ProtoMessage() {}

func (x *BatchUpdateTrackerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateTrackerRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateTrackerRequest) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{12}
}

func (x *BatchUpdateTrackerRequest) GetRequests() []*UpdateTrackerRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchUpdateTrackerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchUpdateTrackerResponse) Reset() {
	*x = BatchUpdateTrackerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocean_ocean_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateTrackerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateTrackerResponse) ProtoMessage() {}

func (x *BatchUpdateTrackerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ocean_ocean_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateTrackerResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateTrackerResponse) Descriptor() ([]byte, []int) {
	return file_ocean_ocean_proto_rawDescGZIP(), []int{13}
}

var File_ocean_ocean_proto protoreflect.FileDescriptor

var file_ocean_ocean_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2f, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x22, 0x36, 0x0a, 0x17, 0x49, 0x66,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x32, 0x0a, 0x18, 0x49, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22,
	0xa0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x07, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x22, 0x58, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0d, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x65, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x65,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x65, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x65, 0x65, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x19, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x1c, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9a, 0x04,
	0x0a, 0x05, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x49, 0x66, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x2e, 0x49, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x63,
	0x65, 0x61, 0x6e, 0x2e, 0x49, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x12,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x27, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x63, 0x65, 0x61,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x6f, 0x63, 0x65, 0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocean_ocean_proto_rawDescOnce sync.Once
	file_ocean_ocean_proto_rawDescData = file_ocean_ocean_proto_rawDesc
)

func file_ocean_ocean_proto_rawDescGZIP() []byte {
	file_ocean_ocean_proto_rawDescOnce.Do(func() {
		file_ocean_ocean_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocean_ocean_proto_rawDescData)
	})
	return file_ocean_ocean_proto_rawDescData
}

var file_ocean_ocean_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ocean_ocean_proto_goTypes = []interface{}{
	(*IfInfoHashExistsRequest)(nil),           // 0: ocean.IfInfoHashExistsRequest
	(*IfInfoHashExistsResponse)(nil),          // 1: ocean.IfInfoHashExistsResponse
	(*BatchInfoHashExistRequest)(nil),         // 2: ocean.BatchInfoHashExistRequest
	(*BatchInfoHashExistResponse)(nil),        // 3: ocean.BatchInfoHashExistResponse
	(*File)(nil),                              // 4: ocean.File
	(*CommitTorrentRequest)(nil),              // 5: ocean.CommitTorrentRequest
	(*CommitTorrentResponse)(nil),             // 6: ocean.CommitTorrentResponse
	(*ListTorrentInfoForTrackerRequest)(nil),  // 7: ocean.ListTorrentInfoForTrackerRequest
	(*Torrent)(nil),                           // 8: ocean.Torrent
	(*ListTorrentInfoForTrackerResponse)(nil), // 9: ocean.ListTorrentInfoForTrackerResponse
	(*UpdateTrackerRequest)(nil),              // 10: ocean.UpdateTrackerRequest
	(*UpdateTrackerResponse)(nil),             // 11: ocean.UpdateTrackerResponse
	(*BatchUpdateTrackerRequest)(nil),         // 12: ocean.BatchUpdateTrackerRequest
	(*BatchUpdateTrackerResponse)(nil),        // 13: ocean.BatchUpdateTrackerResponse
}
var file_ocean_ocean_proto_depIdxs = []int32{
	4,  // 0: ocean.CommitTorrentRequest.files:type_name -> ocean.File
	8,  // 1: ocean.ListTorrentInfoForTrackerResponse.torrent_infos:type_name -> ocean.Torrent
	10, // 2: ocean.BatchUpdateTrackerRequest.requests:type_name -> ocean.UpdateTrackerRequest
	0,  // 3: ocean.Ocean.IfInfoHashExists:input_type -> ocean.IfInfoHashExistsRequest
	2,  // 4: ocean.Ocean.BatchInfoHashExist:input_type -> ocean.BatchInfoHashExistRequest
	5,  // 5: ocean.Ocean.CommitTorrent:input_type -> ocean.CommitTorrentRequest
	7,  // 6: ocean.Ocean.ListTorrentInfoForTracker:input_type -> ocean.ListTorrentInfoForTrackerRequest
	10, // 7: ocean.Ocean.UpdateTracker:input_type -> ocean.UpdateTrackerRequest
	12, // 8: ocean.Ocean.BatchUpdateTracker:input_type -> ocean.BatchUpdateTrackerRequest
	1,  // 9: ocean.Ocean.IfInfoHashExists:output_type -> ocean.IfInfoHashExistsResponse
	3,  // 10: ocean.Ocean.BatchInfoHashExist:output_type -> ocean.BatchInfoHashExistResponse
	6,  // 11: ocean.Ocean.CommitTorrent:output_type -> ocean.CommitTorrentResponse
	9,  // 12: ocean.Ocean.ListTorrentInfoForTracker:output_type -> ocean.ListTorrentInfoForTrackerResponse
	11, // 13: ocean.Ocean.UpdateTracker:output_type -> ocean.UpdateTrackerResponse
	13, // 14: ocean.Ocean.BatchUpdateTracker:output_type -> ocean.BatchUpdateTrackerResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_ocean_ocean_proto_init() }
func file_ocean_ocean_proto_init() {
	if File_ocean_ocean_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocean_ocean_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfInfoHashExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IfInfoHashExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfoHashExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfoHashExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTorrentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTorrentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTorrentInfoForTrackerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Torrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTorrentInfoForTrackerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrackerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrackerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateTrackerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocean_ocean_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateTrackerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocean_ocean_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ocean_ocean_proto_goTypes,
		DependencyIndexes: file_ocean_ocean_proto_depIdxs,
		MessageInfos:      file_ocean_ocean_proto_msgTypes,
	}.Build()
	File_ocean_ocean_proto = out.File
	file_ocean_ocean_proto_rawDesc = nil
	file_ocean_ocean_proto_goTypes = nil
	file_ocean_ocean_proto_depIdxs = nil
}
