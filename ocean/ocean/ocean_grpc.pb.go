// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ocean/ocean.proto

package ocean

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OceanClient is the client API for Ocean service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OceanClient interface {
	IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error)
	CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error)
	ListTorrentInfoForTracker(ctx context.Context, in *ListTorrentInfoForTrackerRequest, opts ...grpc.CallOption) (*ListTorrentInfoForTrackerResponse, error)
	UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error)
	BatchUpdateTracker(ctx context.Context, in *BatchUpdateTrackerRequest, opts ...grpc.CallOption) (*BatchUpdateTrackerResponse, error)
}

type oceanClient struct {
	cc grpc.ClientConnInterface
}

func NewOceanClient(cc grpc.ClientConnInterface) OceanClient {
	return &oceanClient{cc}
}

func (c *oceanClient) IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error) {
	out := new(IfInfoHashExistsResponse)
	err := c.cc.Invoke(ctx, "/ocean.Ocean/IfInfoHashExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanClient) CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error) {
	out := new(CommitTorrentResponse)
	err := c.cc.Invoke(ctx, "/ocean.Ocean/CommitTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanClient) ListTorrentInfoForTracker(ctx context.Context, in *ListTorrentInfoForTrackerRequest, opts ...grpc.CallOption) (*ListTorrentInfoForTrackerResponse, error) {
	out := new(ListTorrentInfoForTrackerResponse)
	err := c.cc.Invoke(ctx, "/ocean.Ocean/ListTorrentInfoForTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanClient) UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error) {
	out := new(UpdateTrackerResponse)
	err := c.cc.Invoke(ctx, "/ocean.Ocean/UpdateTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oceanClient) BatchUpdateTracker(ctx context.Context, in *BatchUpdateTrackerRequest, opts ...grpc.CallOption) (*BatchUpdateTrackerResponse, error) {
	out := new(BatchUpdateTrackerResponse)
	err := c.cc.Invoke(ctx, "/ocean.Ocean/BatchUpdateTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OceanServer is the server API for Ocean service.
// All implementations must embed UnimplementedOceanServer
// for forward compatibility
type OceanServer interface {
	IfInfoHashExists(context.Context, *IfInfoHashExistsRequest) (*IfInfoHashExistsResponse, error)
	CommitTorrent(context.Context, *CommitTorrentRequest) (*CommitTorrentResponse, error)
	ListTorrentInfoForTracker(context.Context, *ListTorrentInfoForTrackerRequest) (*ListTorrentInfoForTrackerResponse, error)
	UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error)
	BatchUpdateTracker(context.Context, *BatchUpdateTrackerRequest) (*BatchUpdateTrackerResponse, error)
	mustEmbedUnimplementedOceanServer()
}

// UnimplementedOceanServer must be embedded to have forward compatible implementations.
type UnimplementedOceanServer struct {
}

func (UnimplementedOceanServer) IfInfoHashExists(context.Context, *IfInfoHashExistsRequest) (*IfInfoHashExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IfInfoHashExists not implemented")
}
func (UnimplementedOceanServer) CommitTorrent(context.Context, *CommitTorrentRequest) (*CommitTorrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTorrent not implemented")
}
func (UnimplementedOceanServer) ListTorrentInfoForTracker(context.Context, *ListTorrentInfoForTrackerRequest) (*ListTorrentInfoForTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTorrentInfoForTracker not implemented")
}
func (UnimplementedOceanServer) UpdateTracker(context.Context, *UpdateTrackerRequest) (*UpdateTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTracker not implemented")
}
func (UnimplementedOceanServer) BatchUpdateTracker(context.Context, *BatchUpdateTrackerRequest) (*BatchUpdateTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateTracker not implemented")
}
func (UnimplementedOceanServer) mustEmbedUnimplementedOceanServer() {}

// UnsafeOceanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OceanServer will
// result in compilation errors.
type UnsafeOceanServer interface {
	mustEmbedUnimplementedOceanServer()
}

func RegisterOceanServer(s grpc.ServiceRegistrar, srv OceanServer) {
	s.RegisterService(&Ocean_ServiceDesc, srv)
}

func _Ocean_IfInfoHashExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IfInfoHashExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanServer).IfInfoHashExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocean.Ocean/IfInfoHashExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanServer).IfInfoHashExists(ctx, req.(*IfInfoHashExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ocean_CommitTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanServer).CommitTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocean.Ocean/CommitTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanServer).CommitTorrent(ctx, req.(*CommitTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ocean_ListTorrentInfoForTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTorrentInfoForTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanServer).ListTorrentInfoForTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocean.Ocean/ListTorrentInfoForTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanServer).ListTorrentInfoForTracker(ctx, req.(*ListTorrentInfoForTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ocean_UpdateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanServer).UpdateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocean.Ocean/UpdateTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanServer).UpdateTracker(ctx, req.(*UpdateTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ocean_BatchUpdateTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateTrackerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OceanServer).BatchUpdateTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocean.Ocean/BatchUpdateTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OceanServer).BatchUpdateTracker(ctx, req.(*BatchUpdateTrackerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ocean_ServiceDesc is the grpc.ServiceDesc for Ocean service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ocean_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocean.Ocean",
	HandlerType: (*OceanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IfInfoHashExists",
			Handler:    _Ocean_IfInfoHashExists_Handler,
		},
		{
			MethodName: "CommitTorrent",
			Handler:    _Ocean_CommitTorrent_Handler,
		},
		{
			MethodName: "ListTorrentInfoForTracker",
			Handler:    _Ocean_ListTorrentInfoForTracker_Handler,
		},
		{
			MethodName: "UpdateTracker",
			Handler:    _Ocean_UpdateTracker_Handler,
		},
		{
			MethodName: "BatchUpdateTracker",
			Handler:    _Ocean_BatchUpdateTracker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocean/ocean.proto",
}
