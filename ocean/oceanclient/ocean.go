// Code generated by goctl. DO NOT EDIT!
// Source: ocean.proto

package oceanclient

import (
	"context"

	"dht-ocean/ocean/ocean"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommitTorrentRequest     = ocean.CommitTorrentRequest
	CommitTorrentResponse    = ocean.CommitTorrentResponse
	IfInfoHashExistsRequest  = ocean.IfInfoHashExistsRequest
	IfInfoHashExistsResponse = ocean.IfInfoHashExistsResponse

	Ocean interface {
		IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error)
		CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error)
	}

	defaultOcean struct {
		cli zrpc.Client
	}
)

func NewOcean(cli zrpc.Client) Ocean {
	return &defaultOcean{
		cli: cli,
	}
}

func (m *defaultOcean) IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.IfInfoHashExists(ctx, in, opts...)
}

func (m *defaultOcean) CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.CommitTorrent(ctx, in, opts...)
}
