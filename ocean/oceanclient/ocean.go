// Code generated by goctl. DO NOT EDIT.
// Source: ocean.proto

package oceanclient

import (
	"context"

	"dht-ocean/ocean/ocean"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchUpdateTrackerRequest         = ocean.BatchUpdateTrackerRequest
	BatchUpdateTrackerResponse        = ocean.BatchUpdateTrackerResponse
	CommitTorrentRequest              = ocean.CommitTorrentRequest
	CommitTorrentResponse             = ocean.CommitTorrentResponse
	File                              = ocean.File
	IfInfoHashExistsRequest           = ocean.IfInfoHashExistsRequest
	IfInfoHashExistsResponse          = ocean.IfInfoHashExistsResponse
	ListTorrentInfoForTrackerRequest  = ocean.ListTorrentInfoForTrackerRequest
	ListTorrentInfoForTrackerResponse = ocean.ListTorrentInfoForTrackerResponse
	Torrent                           = ocean.Torrent
	UpdateTrackerRequest              = ocean.UpdateTrackerRequest
	UpdateTrackerResponse             = ocean.UpdateTrackerResponse

	Ocean interface {
		IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error)
		CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error)
		ListTorrentInfoForTracker(ctx context.Context, in *ListTorrentInfoForTrackerRequest, opts ...grpc.CallOption) (*ListTorrentInfoForTrackerResponse, error)
		UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error)
		BatchUpdateTracker(ctx context.Context, in *BatchUpdateTrackerRequest, opts ...grpc.CallOption) (*BatchUpdateTrackerResponse, error)
	}

	defaultOcean struct {
		cli zrpc.Client
	}
)

func NewOcean(cli zrpc.Client) Ocean {
	return &defaultOcean{
		cli: cli,
	}
}

func (m *defaultOcean) IfInfoHashExists(ctx context.Context, in *IfInfoHashExistsRequest, opts ...grpc.CallOption) (*IfInfoHashExistsResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.IfInfoHashExists(ctx, in, opts...)
}

func (m *defaultOcean) CommitTorrent(ctx context.Context, in *CommitTorrentRequest, opts ...grpc.CallOption) (*CommitTorrentResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.CommitTorrent(ctx, in, opts...)
}

func (m *defaultOcean) ListTorrentInfoForTracker(ctx context.Context, in *ListTorrentInfoForTrackerRequest, opts ...grpc.CallOption) (*ListTorrentInfoForTrackerResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.ListTorrentInfoForTracker(ctx, in, opts...)
}

func (m *defaultOcean) UpdateTracker(ctx context.Context, in *UpdateTrackerRequest, opts ...grpc.CallOption) (*UpdateTrackerResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.UpdateTracker(ctx, in, opts...)
}

func (m *defaultOcean) BatchUpdateTracker(ctx context.Context, in *BatchUpdateTrackerRequest, opts ...grpc.CallOption) (*BatchUpdateTrackerResponse, error) {
	client := ocean.NewOceanClient(m.cli.Conn())
	return client.BatchUpdateTracker(ctx, in, opts...)
}
