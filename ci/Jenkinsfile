pipeline {
  agent any

  stages {
    stage("last-changes") {
      steps {
        script {
          def publisher = LastChanges.getLastChangesPublisher "LAST_SUCCESSFUL_BUILD", "SIDE", "LINE", true, true, "", "", "", "", ""
          publisher.publishLastChanges()
          def changes = publisher.getLastChanges()
          def pattern = /diff --([\w]+) a\/(.*?) b\/(.*?)\n/
          def c = changes.getDiff()
          def dockers = [
            "crawler": "docker.flightdeck.tech/dht-ocean/crawler",
            "ocean": "docker.flightdeck.tech/dht-ocean/ocean",
            "tracker": "docker.flightdeck.tech/dht-ocean/tracker"
          ]
          buildDocker = [] as Set<String>
          c.eachMatch(pattern) { m ->
            def filename = m[2]
            def parts = filename.split("/")
            if (parts[0] == "common") {
              dockers.each { k, v ->
                buildDocker.add(k)
              }
            } else if (dockers.containsKey(parts[0])) {
              buildDocker.add(parts[0])
            }
          }
        }
      }
    }
    stage("Build services") {
      agent {
        docker { image 'docker:stable' }
      }
      steps {
        script {
          def tasks = [:]
          buildDocker.each() {
            tasks["${it}"] = {
              stage("Build and push ${it}") {
                steps {
                  def label = dockers[it]
                  app = docker.build("${label}:latest", "${it}")
                  app.push()
                }
              }
            }
          }
          parallel tasks
        }
      }
    }
  }
}